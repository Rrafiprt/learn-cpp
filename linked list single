#include <iostream>
using namespace std;

// Kelas Node merepresentasikan 1 elemen dalam linked list
class Node {
public:
    string data;      // Menyimpan data
    Node* next;       // Pointer ke node berikutnya dalam linked list

    // Constructor default dan parameterized
    Node(const string& data = "", Node* next = nullptr) : data(data), next(next) {}
};

// Kelas LinkedList merepresentasikan struktur linked list
class LinkedList {
public:
    Node* head; // Pointer ke node pertama (head) dari linked list

    // Constructor inisialisasi linked list kosong
    LinkedList() : head(nullptr) {}

    // Menampilkan semua data dalam linked list
    void print() {
        if (head == nullptr) {
            cout << "Linked list is empty" << endl;
            return;
        }

        Node* itr = head; // Iterator untuk traversal
        while (itr) {
            cout << itr->data;
            if (itr->next) {
                cout << " -> ";
            }
            itr = itr->next;
        }
        cout << endl;
    }

    // Mengembalikan semua data sebagai satu string
    string toString() {
        string result = "";
        Node* pointer = head;
        while (pointer != nullptr) {
            result += pointer->data + " ";
            pointer = pointer->next;
        }
        return result;
    }

    // Menghitung panjang (jumlah elemen) dalam linked list
    int get_length() {
        int count = 0;
        Node* itr = head;
        while (itr) {
            count++;
            itr = itr->next;
        }
        return count;
    }

    // Menambahkan elemen di awal linked list
    void add_first(const string& data) {
        Node* node = new Node(data, head);
        head = node;
    }

    // Menambahkan elemen di akhir linked list
    void add_last(const string& data) {
        if (head == nullptr) {
            head = new Node(data, nullptr);
            return;
        }

        Node* itr = head;
        while (itr->next) {
            itr = itr->next;
        }
        itr->next = new Node(data, nullptr);
    }

    // Menambahkan elemen pada posisi tertentu (index)
    void add(int index, const string& data) {
        if (index < 0 || index > get_length()) {
            throw invalid_argument("Invalid Index");
        }

        if (index == 0) {
            add_first(data);
            return;
        }

        int count = 0;
        Node* itr = head;
        while (itr) {
            if (count == index - 1) {
                Node* node = new Node(data, itr->next);
                itr->next = node;
                break;
            }
            itr = itr->next;
            count++;
        }
    }

    // Menghapus elemen berdasarkan index
    void remove_at(int index) {
        if (index < 0 || index >= get_length()) {
            throw invalid_argument("Invalid Index");
        }

        if (index == 0) {
            Node* temp = head;
            head = head->next;
            delete temp;
            return;
        }

        int count = 0;
        Node* itr = head;
        while (itr) {
            if (count == index - 1) {
                Node* temp = itr->next;
                itr->next = itr->next->next;
                delete temp;
                break;
            }
            itr = itr->next;
            count++;
        }
    }

    // Menghapus elemen pertama (head)
    void remove_first() {
        if (get_length() > 0) {
            if (get_length() == 1) {
                Node* temp = head;
                head = nullptr;
                delete temp;
                return;
            } else {
                Node* temp = head;
                head = head->next;
                temp->next = nullptr;
                delete temp;
            }
        }
    }

    // Menghapus elemen terakhir dari linked list
    void remove_last() {
        if (get_length() > 0) {
            if (get_length() == 1) {
                Node* temp = head;
                head = nullptr;
                delete temp;
                return;
            } else {
                Node* pointer = head;
                while (pointer->next->next != nullptr) {
                    pointer = pointer->next;
                }
                Node* temp = pointer->next;
                pointer->next = nullptr;
                delete temp;
            }
        }
    }

    // Mengisi linked list dengan array string
    void add_values(const string* data_list, int size) {
        head = nullptr; // reset linked list
        for (int i = 0; i < size; ++i) {
            add_last(data_list[i]);
        }
    }
};

// Fungsi utama: demonstrasi penggunaan linked list
int main() {
    LinkedList ll;

    // Membuat array string nama dan mengisi ke linked list
    string nama[] = {"Budi", "Andi"};
    int size = sizeof(nama) / sizeof(nama[0]);
    ll.add_values(nama, size);

    cout << "==List awal==\n";
    ll.print();

    // Menambahkan data di awal, akhir, dan tengah (index ke-2)
    ll.add_first("Andina");
    ll.add_last("Sara");
    ll.add(2, "karna");

    cout << "\n==List setelah ditambah==\n";
    ll.print();

    // Menghapus elemen pertama, terakhir, dan elemen pada index ke-2
    ll.remove_first();
    ll.remove_last();
    ll.remove_at(2);

    cout << "\n==List setelah dihapus==\n";
    ll.print();
}
